// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package clint_reg_pkg;

  // Param list
  parameter int NumCores = 2;

  // Address widths within the block
  parameter int BlockAw = 16;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic        q;
  } clint_reg2hw_msip_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } clint_reg2hw_mtimecmp_low0_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } clint_reg2hw_mtimecmp_high0_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } clint_reg2hw_mtimecmp_low1_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } clint_reg2hw_mtimecmp_high1_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } clint_reg2hw_mtime_low_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } clint_reg2hw_mtime_high_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } clint_hw2reg_mtime_low_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } clint_hw2reg_mtime_high_reg_t;

  // Register -> HW type
  typedef struct packed {
    clint_reg2hw_msip_mreg_t [1:0] msip; // [193:192]
    clint_reg2hw_mtimecmp_low0_reg_t mtimecmp_low0; // [191:160]
    clint_reg2hw_mtimecmp_high0_reg_t mtimecmp_high0; // [159:128]
    clint_reg2hw_mtimecmp_low1_reg_t mtimecmp_low1; // [127:96]
    clint_reg2hw_mtimecmp_high1_reg_t mtimecmp_high1; // [95:64]
    clint_reg2hw_mtime_low_reg_t mtime_low; // [63:32]
    clint_reg2hw_mtime_high_reg_t mtime_high; // [31:0]
  } clint_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    clint_hw2reg_mtime_low_reg_t mtime_low; // [65:33]
    clint_hw2reg_mtime_high_reg_t mtime_high; // [32:0]
  } clint_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] CLINT_MSIP_OFFSET = 16'h 0;
  parameter logic [BlockAw-1:0] CLINT_MTIMECMP_LOW0_OFFSET = 16'h 4000;
  parameter logic [BlockAw-1:0] CLINT_MTIMECMP_HIGH0_OFFSET = 16'h 4004;
  parameter logic [BlockAw-1:0] CLINT_MTIMECMP_LOW1_OFFSET = 16'h 4008;
  parameter logic [BlockAw-1:0] CLINT_MTIMECMP_HIGH1_OFFSET = 16'h 400c;
  parameter logic [BlockAw-1:0] CLINT_MTIME_LOW_OFFSET = 16'h bff8;
  parameter logic [BlockAw-1:0] CLINT_MTIME_HIGH_OFFSET = 16'h bffc;

  // Register index
  typedef enum int {
    CLINT_MSIP,
    CLINT_MTIMECMP_LOW0,
    CLINT_MTIMECMP_HIGH0,
    CLINT_MTIMECMP_LOW1,
    CLINT_MTIMECMP_HIGH1,
    CLINT_MTIME_LOW,
    CLINT_MTIME_HIGH
  } clint_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] CLINT_PERMIT [7] = '{
    4'b 0001, // index[0] CLINT_MSIP
    4'b 1111, // index[1] CLINT_MTIMECMP_LOW0
    4'b 1111, // index[2] CLINT_MTIMECMP_HIGH0
    4'b 1111, // index[3] CLINT_MTIMECMP_LOW1
    4'b 1111, // index[4] CLINT_MTIMECMP_HIGH1
    4'b 1111, // index[5] CLINT_MTIME_LOW
    4'b 1111  // index[6] CLINT_MTIME_HIGH
  };

endpackage

